MYSQL task:
link:https://medium.com/@vickneswari.s.t/mysql-task-eb1647a52fd0

question:
SELECT queries
lesson:1
1.Find the title of each film
select title from movies;

2.Find the director of each film
select director from movies;

3.Find the title and director of each film
select title, director from movies;

4.Find the title and year of each film
select title, year from movies;

5.Find all the information about each film
select * from movies;

 2.lesson
1.Find the movie with a row id of 6
SELECT id, title, director from movies where id=6;

2.Find the movies released in the years between 2000 and 2010
select title, id, year from movies where year between 2000 and 2010;

3.select id, title from movies where year not between 2000 and 2010;
select * from movies where year not between 2000 and 2010;

4.select * from movies where year <=2003;
lesson:3 constraints 
Find all the Toy Story movies 

SELECT *FROM movies where title like'Toy Story%';
2.Find all the movies directed by John Lasseter
SELECT title FROM movies WHERE director = "John Lasseter";
3.Find all the movies (and director) not directed by John Lasseter
SELECT title FROM movies WHERE not director = "John Lasseter";
4.Find all the WALL-* movies
SELECT title FROM movies WHERE title LIKE "WALL-%"

Lesson 4 : Filtering and sorting Query results
List all directors of Pixar movies (alphabetically), without duplicates

SELECT DISTINCT director FROM movies ORDER BY director ASC;
2.List the last four Pixar movies released (ordered from most recent to least)
SELECT DISTINCT title FROM movies ORDER BY year DESC LIMIT 4;
3.List the first five Pixar movies sorted alphabetically
SELECT DISTINCT title FROM movies ORDER BY title asc limit 5;
4.List the next five Pixar movies sorted alphabetically 
Select DISTINCT title FROM movies ORDER BY title asc limit 5 offset 5;

lessson5.Simple SELECT Queries
1.List all the Canadian cities and their populations 
SELECT city, population
FROM north_american_cities
WHERE country = "Canada";
2.Order all the cities in the United States by their latitude from north to south
SELECT city
FROM north_american_cities
WHERE country = "United States"
ORDER BY latitude DESC;
3.List all the cities west of Chicago, ordered from west to east
SELECT city
FROM north_american_cities
WHERE longitude < -87.629798
ORDER BY longitude;
4.List the two largest cities in Mexico (by population)
SELECT city
FROM north_american_cities
WHERE country = "Mexico"
ORDER BY population DESC
LIMIT 2;
5.List the third and fourth largest cities (by population) in the United States and their population
SELECT city
FROM north_american_cities
WHERE country = "United States"
ORDER BY population DESC
LIMIT 2 OFFSET 2;

lesson:6

simple queriesMulti-table queries with JOINs
1.Find the domestic and international sales for each movie ✓
SELECT title, domestic_sales, international_sales
FROM movies
INNER JOIN boxoffice
 ON movies.id = boxoffice.movie_id;
2.Show the sales numbers for each movie that did better internationally rather than domestically
SELECT title, domestic_sales, international_sales
FROM movies
INNER JOIN boxoffice
 ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales;
3.List all the movies by their ratings in descending order ✓
SELECT title, rating FROM movies join boxoffice
on movies.id=boxoffice.movie_id
order by rating desc;

Lesson 7: OUTER JOINs
Find the list of all buildings that have employees

SELECT distinct building FROM employees;
2.Find the list of all buildings and their capacity
SELECT * from buildings;
3.List all buildings and the distinct employee roles in each building (including empty buildings)
SELECT DISTINCT building_name, role
FROM buildings
LEFT JOIN employees
 ON building_name = employees.building;

lesson:8-A short note on NULLs
Find the name and role of all employees who have not been assigned to a building ✓

SELECT name,role FROM employees Where building is null;
2.Find the names of the buildings that hold no employees
SELECT DISTINCT building_name
FROM buildings
LEFT JOIN employees
 ON building_name = employees.building
WHERE employees.building IS NULL;

Lesson 9 : Queries with expressions
1.List all movies and their combined sales in millions of dollars
SELECT DISTINCT
 title,
 (domestic_sales + international_sales) / 1000000 AS sales
FROM movies
INNER JOIN boxoffice
 ON movies.id = boxoffice.movie_id;
2.List all movies and their ratings in percent
SELECT DISTINCT
 title,
 (rating * 10) AS rate_percent
FROM movies
INNER JOIN boxoffice
 ON movies.id = boxoffice.movie_id;
3.List all movies that were released on even number years
SELECT title FROM movies WHERE year % 2 = 0;

SQL Lesson 10: Queries with aggregates 
Find the longest time that an employee has been at the studio ✓

SELECT max(years_employed)as max_years_employed FROM employees;
2.For each role, find the average number of years employed by employees in that role
select role, avg(years_employed) as average_years_employed from employees
Group by role;
3.Find the total number of employee years worked in each building
select building,sum(years_employed) as total_years_employed from Employees
Group by building;

SQL Lesson 11: Queries with aggregates 

Find the number of Artists in the studio (without a HAVING clause)
select role, count(*) as Number_of_artists
From employees
Where role = "Artist";
2.Find the number of Employees of each role in the studio
select role, count(*)
From employees
Group by role;
3.Find the total number of years employed by all Engineers
select role, SUM(years_employed)
From employees
Group by role
Having role = "Engineer";

SQL Lesson 12: Order of execution of a Query

1.Find the number of movies each director has directed
select director,count (id) as Num_movies_directed
From movies
Group by director;
2. Find the total domestic and international sales that can be attributed to each director
select director, sum(domestic_sales + international_sales) as Cumulative_sales_from_all_movies
From movies
Inner join boxoffice
On movies.id = boxoffice.movie_id
Group by director;

SQL Lesson 13: Inserting rows:
Add the studio's new production, Toy Story 4 to the list of movies (you can use any director) ✓

INSERT INTO movies (id, title, director, year, length_minutes) VALUES (15, "Toy Story 4", "John Lasseter", 2017, 110 );
2.toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table. ✓
iNSERT INTO boxoffice (movie_id, rating, domestic_sales, international_sales) VALUES (15, 8.7, 340000000 , 270000000);
lessson:14 - updating rows
The director for A Bug's Life is incorrect, it was actually directed by John Lasseter ✓
lesson:14-update
UPDATE movies SET director = "John Lasseter" WHERE title = "A Bug's Life";
2.The year that Toy Story 2 was released is incorrect, it was actually released in 1999
UPDATE movies SET year = 1999 WHERE title = "Toy Story 2";
3.Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich
UPDATE movies SET director = "Lee Unkrich", title = "Toy Story 3" WHERE title = "Toy Story 8";

lesson:15 deleting
This database is getting too big, lets remove all movies that were released before 2005.

DELETE FROM movies WHERE year < 2005;
2.Andrew Stanton has also left the studio, so please remove all movies directed by him.
DELETE FROM movies WHERE director = "Andrew Stanton";

lesson:16 create
Create a new table named Database with the following columns:

– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints.
CREATE TABLE database (id INTEGER PRIMARY KEY, name TEXT, version FLOAT, download_count INTEGER );

lessson:17-altering tables
Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.

ALTER TABLE movies ADD aspect_ratio FLOAT;
2.Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English.
ALTER TABLE movies ADD language TEXT DEFAULT "English";
lesson:18 dropping tables:
We've sadly reached the end of our lessons, lets clean up by removing the Movies table

DROP TABLE IF EXISTS movies;
2.And drop the BoxOffice table as well
DROP TABLE IF EXISTS boxoffice;
 finished 1–18 topics